# Generated by Django 5.0.6 on 2024-11-05 21:01

import django.db.models.deletion
import django_better_admin_arrayfield.models.fields
import utils.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("adjfeedback", "0017_rename_question_models"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[],
            state_operations=[
                migrations.CreateModel(
                    name="Question",
                    fields=[
                        (
                            "id",
                            models.BigAutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        (
                            "seq",
                            models.IntegerField(
                                help_text="The order in which questions are displayed",
                                verbose_name="sequence number",
                            ),
                        ),
                        (
                            "text",
                            models.CharField(
                                help_text='The question displayed to participants, e.g., "Did you agree with the decision?"',
                                max_length=255,
                                verbose_name="text",
                            ),
                        ),
                        (
                            "name",
                            models.CharField(
                                help_text='A short name for the question, e.g., "Agree with decision"',
                                max_length=30,
                                verbose_name="name",
                            ),
                        ),
                        (
                            "answer_type",
                            models.CharField(
                                choices=[
                                    ("bc", "checkbox"),
                                    ("bs", "yes/no (dropdown)"),
                                    ("i", "integer (textbox)"),
                                    ("is", "integer scale"),
                                    ("f", "float"),
                                    ("t", "text"),
                                    ("tl", "long text"),
                                    ("ss", "select one"),
                                    ("ms", "select multiple"),
                                ],
                                max_length=2,
                                verbose_name="answer type",
                            ),
                        ),
                        (
                            "required",
                            models.BooleanField(
                                default=True,
                                help_text="Whether participants are required to fill out this field",
                                verbose_name="required",
                            ),
                        ),
                        (
                            "min_value",
                            models.FloatField(
                                blank=True,
                                help_text="Minimum allowed value for numeric fields (ignored for text or boolean fields)",
                                null=True,
                                verbose_name="minimum value",
                            ),
                        ),
                        (
                            "max_value",
                            models.FloatField(
                                blank=True,
                                help_text="Maximum allowed value for numeric fields (ignored for text or boolean fields)",
                                null=True,
                                verbose_name="maximum value",
                            ),
                        ),
                        (
                            "choices",
                            django_better_admin_arrayfield.models.fields.ArrayField(
                                base_field=models.TextField(),
                                blank=True,
                                default=list,
                                help_text="Permissible choices for select one/multiple fields (ignored for other fields)",
                                size=None,
                                verbose_name="choices",
                            ),
                        ),
                        (
                            "for_content_type",
                            models.ForeignKey(
                                limit_choices_to=models.Q(
                                    models.Q(
                                        ("app_label", "adjfeedback"),
                                        ("model", "adjudicatorfeedback"),
                                    ),
                                    models.Q(
                                        ("app_label", "participants"),
                                        ("model", "tournamentinstitution"),
                                    ),
                                    models.Q(
                                        ("app_label", "participants"), ("model", "speaker")
                                    ),
                                    models.Q(
                                        ("app_label", "participants"), ("model", "adjudicator")
                                    ),
                                    models.Q(("app_label", "participants"), ("model", "coach")),
                                    models.Q(
                                        ("app_label", "participants"), ("model", "person")
                                    ),
                                    models.Q(("app_label", "participants"), ("model", "team")),
                                    _connector="OR",
                                ),
                                on_delete=django.db.models.deletion.CASCADE,
                                to="contenttypes.contenttype",
                                verbose_name="for content type",
                            ),
                        ),
                        (
                            "tournament",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                to="tournaments.tournament",
                                verbose_name="tournament",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "question",
                        "verbose_name_plural": "questions",
                    },
                ),
                migrations.CreateModel(
                    name="Answer",
                    fields=[
                        (
                            "id",
                            models.BigAutoField(
                                auto_created=True,
                                primary_key=True,
                                serialize=False,
                                verbose_name="ID",
                            ),
                        ),
                        ("object_id", models.PositiveIntegerField(verbose_name="object id")),
                        ("answer", models.TextField(verbose_name="answer")),
                        (
                            "content_type",
                            models.ForeignKey(
                                limit_choices_to=models.Q(
                                    models.Q(
                                        ("app_label", "adjfeedback"),
                                        ("model", "adjudicatorfeedback"),
                                    ),
                                    models.Q(
                                        ("app_label", "participants"),
                                        ("model", "tournamentinstitution"),
                                    ),
                                    models.Q(
                                        ("app_label", "participants"), ("model", "speaker")
                                    ),
                                    models.Q(
                                        ("app_label", "participants"), ("model", "adjudicator")
                                    ),
                                    models.Q(("app_label", "participants"), ("model", "coach")),
                                    models.Q(
                                        ("app_label", "participants"), ("model", "person")
                                    ),
                                    models.Q(("app_label", "participants"), ("model", "team")),
                                    _connector="OR",
                                ),
                                on_delete=django.db.models.deletion.CASCADE,
                                to="contenttypes.contenttype",
                                verbose_name="content type",
                            ),
                        ),
                        (
                            "question",
                            models.ForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                to="registration.question",
                                verbose_name="question",
                            ),
                        ),
                    ],
                    options={
                        "verbose_name": "string answer",
                        "verbose_name_plural": "string answers",
                        "abstract": False,
                    },
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    f"ALTER INDEX adjfeed_stringanswer_question__content_type__object_id_uniq RENAME TO registr_answer_question__content_type__object_id_uniq;",
                    f"ALTER INDEX registr_answer_question__content_type__object_id_uniq RENAME TO adjfeed_stringanswer_question__content_type__object_id_uniq;",
                ),
            ],
            state_operations=[
                migrations.AddConstraint(
                    model_name="answer",
                    constraint=utils.models.UniqueConstraint(
                        fields=("question", "content_type", "object_id"),
                        name="registr_answer_question__content_type__object_id_uniq",
                    ),
                ),
            ]
        ),
        migrations.AlterModelOptions(
            name="answer",
            options={"verbose_name": "answer", "verbose_name_plural": "answers"},
        ),
        migrations.AddIndex(
            model_name="answer",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="registratio_content_ac834a_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="question",
            constraint=utils.models.UniqueConstraint(
                fields=("tournament", "for_content_type", "seq"),
                name="registr_question_tournament__for_content_type__seq_uniq",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="help_text",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Additional context for the question",
                verbose_name="help text",
            ),
            preserve_default=False,
        ),
    ]
